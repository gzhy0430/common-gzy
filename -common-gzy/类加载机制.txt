什么是类加载器
负责读取JAVA字节码代码，并转换成java.lang.Class类的一个实例

类加载器与类的相同判断
类加载器除了用于加载类外，还可用于确定类在JVM中的唯一性。
同样的字节代码，不同的类加载器加载之后，结果也不相同
要判断两个类是否相同，前提是两个类必须被同一个类加载器加载，否则两个类不相同
equals、isAssignableFrom、isInstance、instanceof

类加载器的种类
启动类加载器：Bootstrap ClassLoader，作用于JAVA_HOME\lib及-Xbootclasspath参数限定的类
扩展类加载器：Extension ClassLoader，加载\lib\ext及java.ext.dirs系统变量指定的类
应用程序类加载器：Application ClassLoader，加载ClassPath中的类
自定义类加载器：通过继承ClassLoader实现，一般是加载自定义类

双亲委派模型
类加载请求被委派给父类加载器完成，如果父类加载器无法完成这个加载，子类尝试自己加载
避免同一个类被加载多次
每个加载器只能加载自己范围内的类

类加载过程
类加载三个步骤：加载(Loading)-->连接(Linking)-->初始化(Initialization)
加载：根据一个类的全路径来读取类的二进制字节流到JVM内部
将字节流所代表的静态存储结构转换为方法区的运行时数据结构(hotspot选择将Class对象存储在方法区中)
转换为一个与目标类型对应的java.lang.Class对象
连接：
验证(Verification)文件格式验证、元数据验证、字节码验证、符号引用验证
-->准备(Preparation)为类中的所有静态变量分配内存空间，并为其设置一个初始值
-->解析(Resolution)将常量池中所有的符号引用转换为直接引用

初始化：
初始化触发条件：
--new、反射、序列化等创建一个新的对象实例
--调用一个类的静态方法(即字节码执行invokestatic指令)
--调用一个类静态字段时候(即字节码执行getstatic或putstatic指令),final常量除外
--调用反射API时候(java.lang.Class或java.lang.reflect中方法)
--初始化一个类的派生类时(JVM要求初始化一个类时，必须提前初始化超类,接口除外)
--JVM启动包含main方法的启动类时

自定义类加载器
继承java.lang.ClassLoader类，重写findClass(String name)方法即可，即指明如何获取类的字节码流
如果要符合双亲委派规范，则重写findClass(自定义加载逻辑),要破坏的话重写loadClass方法(双亲委派的具体逻辑实现)

JAVA热部署实现
最根本的方式是修改虚拟机源码、更改classloader的加载行为，使虚拟机能够监听class文件的更新，重新加载class文件，这样的行为破坏性很大，为后续的JVM升级埋下一个大坑
另一种友好的方法是创建自己的classloader来加载需要监听的class，这样就能控制类加载时机，从而实现热部署
1.销毁自定义classloader(被该加载器加载的class也会自动卸载)
2.更新class
3.使用新的ClassLoader加载class

类加载过程：
从被加载到内存到从内存卸载的整个生命周期包括
加载-loading
连接（验证-Verification->准备-Preparation->解析-Resolution）
初始化-Initialzation
使用-Using
卸载-Unloading

加载：(java.lang.ClassLoader的loadClass方法)需要做三件事
通过一个类的全限定名来获取定义此类的二进制字节流(并非必须从class文件获取，可以从网络、动态生成、数据库等)
将这个字节流所代表的静态存储结构转化为方法区运行时数据结构
在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类各种数据的访问入口

验证：这一阶段目的是确保Class文件的字节流中信息符合当前虚拟机要求，且并不会危害虚拟机自身，需要做四件事
文件格式验证：验证字节流是否符合Class文件格式规范
元数据验证：对字节码描述的信息进行语义分析，以确保其信息符合java语言规范
字节码验证：通过数据流和控制流分析，确定程序语义是合法的，符合逻辑的
符号引用验证：确保解析动作正确执行
--可以通过-Xverifynone参数来关闭大部分的类验证措施，可以缩短虚拟机类加载时间

准备：准备阶段正式为类变量分配内存并设置类变量初始值。这些变量使用的内存都在方法区中分配。

解析：虚拟机将常量池内的符号引用替换为直接引用的过程。

初始化：开始执行类中定义的java程序代码，执行类构造器(clinit)方法
编译器自动收集类中的所有类变量的赋值动作和静态语句块
static块不能访问定义在后面的类变量，可以赋值
虚拟机严格规定只有5中情况必须对类进行初始化：
new、getstatic、putstatic、invokestatic
java.lang.reflact反射调用
初始化触发没有初始化的父类初始化
JVM指定一个main方法类-主类
java.lang.invoke.Methodhandle实例最后解析的结构REF_getstatic,REF_putstatic,REF_invokestatic方法句柄对应的类

通过数组定义来引用类不会触发类的初始化
常量在编译阶段会存入调用类的常量池中，本质上没有直接引用定义常量的类，因此不会触发初始化

？？？？？？？？？？？
类加载的流程

？？？？？？？？？？？
能否在加载类的时候对字节码进行修改--使用Java探针技术





















